{"EDITOR_STATE":{"allProjectFiles":{"2417d63c-8170-4850-b48d-dacae4d60a09":{"id":"2417d63c-8170-4850-b48d-dacae4d60a09","parent":null,"name":"BatchProcess","type":"DIRECTORY","isDirectory":true,"children":["50773989-1879-468a-b1b4-998349dcc77a"],"isRemovable":false,"filePath":"BatchProcess"},"50773989-1879-468a-b1b4-998349dcc77a":{"id":"50773989-1879-468a-b1b4-998349dcc77a","parent":"2417d63c-8170-4850-b48d-dacae4d60a09","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"BatchProcess/lambda.js","code":"let AWS = require('aws-sdk');\nconst sns = new AWS.SNS();\nconst s3 = new AWS.S3();\nexports.handler = function (event, context, callback) {\n\ts3.listObjects({\n\t\t'Bucket': 'batchprocess.bucket',\n\t\t'MaxKeys': 100,\n\t\t'Prefix': ''\n\t}).promise()\n\t\t.then(data => {\n\t\t\tconsole.log(data);           // successful response\n\t\t\t/*\n\t\t\tdata = {\n\t\t\t Contents: [\n\t\t\t\t{\n\t\t\t\t   ETag: \"\\\\\"70ee1738b6b21e2c8a43f3a5ab0eee71\\\\\"\",\n\t\t\t\t   Key: \"example1.jpg\",\n\t\t\t\t   LastModified: <Date Representation>,\n\t\t\t\t   Owner: {\n\t\t\t\t\t  DisplayName: \"myname\",\n\t\t\t\t\t  ID: \"12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc\"\n\t\t\t\t   },\n\t\t\t\t   Size: 11,\n\t\t\t\t   StorageClass: \"STANDARD\"\n\t\t\t\t},\n\t\t\t\t{...}\n\t\t\t*/\n\t\t\tlet numFiles = data.Contents.length;\n\t\t\tlet successCount = 0;\n\t\t\tlet failedCount = 0;\n\n\t\t\tconsole.log(`${numFiles} files found to process`);\n\n\t\t\tif (numFiles === 0) {\n\t\t\t\t// There are no files to process. So notify that.\n\t\t\t\texports.sendNotification(\n\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t'No files found to be processed',\n\t\t\t\t\t() => callback(null, \"Processing finished without any files & Notification sent\"),\n\t\t\t\t\t(err) => callback(err, \"Processing finished without any files & Notification failed\"));\n\t\t\t}\n\n\t\t\t// For each file, execute the processing\n\t\t\tdata.Contents.forEach(file => {\n\t\t\t\tlet fileName = file.Key;\n\n\t\t\t\tconsole.log(`Processing File : ${fileName}`);\n\t\t\t\t// CUSTOM PROCESSING LOGIC GOES HERE\n\n\t\t\t\t// After the processing, delete the file\n\t\t\t\ts3.deleteObject({\n\t\t\t\t\t'Bucket': \"batchprocess.bucket\",\n\t\t\t\t\t'Key': fileName\n\t\t\t\t}).promise()\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tconsole.log(`Successfully deleted file ${fileName}`);\n\t\t\t\t\t\tsuccessCount++;\n\n\t\t\t\t\t\tif ((successCount + failedCount) === numFiles) {\n\t\t\t\t\t\t\t// This is the last file. So send the notification.\n\t\t\t\t\t\t\tlet message = `Processing finished. ${successCount} successful and ${failedCount} failed`;\n\n\t\t\t\t\t\t\texports.sendNotification(\n\t\t\t\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t() => callback(null, \"Processing finished & Notification sent\"),\n\t\t\t\t\t\t\t\t(err) => callback(err, \"Processing finished & Notification failed\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tconsole.log(`Failed to delete file : ${fileName}`, err, err.stack);\n\t\t\t\t\t\tfailedCount++;\n\n\t\t\t\t\t\tif ((successCount + failedCount) === numFiles) {\n\t\t\t\t\t\t\t// This is the last file. So send the notification.\n\t\t\t\t\t\t\tlet message = `Processing finished. ${successCount} successful and ${failedCount} failed`;\n\n\t\t\t\t\t\t\texports.sendNotification(\n\t\t\t\t\t\t\t\t'Processing Finished',\n\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t() => callback(null, \"Processing finished & Notification sent\"),\n\t\t\t\t\t\t\t\t(err) => callback(err, \"Processing finished & Notification failed\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t// TODO: delete the processed file\n\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\t// console.log(err, err.stack); // an error occurred\n\t\t\tconsole.log(\"Failed to get file list\", err, err.stack); // an error occurred\n\t\t\tlet message = `Message processing failed due to : ${err}`;\n\n\t\t\texports.sendNotification(\n\t\t\t\t'Processing Failed',\n\t\t\t\tmessage,\n\t\t\t\t() => callback(err, \"Failed to get file list\"),\n\t\t\t\t(err1) => callback(err, \"Failed to get file list\"));\n\n\n\t\t});\n\n\n\tcallback(null, 'Successfully executed');\n}\n\nexports.sendNotification = (subject, message, onSuccess, onFailure) => {\n\t// TODO: send SNS notification\n\n\tsns.publish({\n\t\tMessage: message,\n\t\tSubject: subject,\n\t\tMessageAttributes: {},\n\t\tMessageStructure: 'String',\n\t\tTopicArn: 'arn:aws:sns:us-east-1:318300609668:BatchProcess_SNS'\n\t}).promise()\n\t\t.then(data => {\n\t\t\t// your code goes here\n\t\t\tconsole.log(\"Successfully published notification\");\n\t\t\tonSuccess();\n\t\t})\n\t\t.catch(err => {\n\t\t\t// error handling goes here\n\t\t\tconsole.log(\"Error occurred while publishing notification\", err, err.stack);\n\t\t\tonFailure(err);\n\t\t});\n}","triggers":[{"resourceName":"cweBatchProcess","config":{}}],"version":27,"syncVersion":24}},"rootNode":"2417d63c-8170-4850-b48d-dacae4d60a09","openFiles":["50773989-1879-468a-b1b4-998349dcc77a"],"currentFileId":"50773989-1879-468a-b1b4-998349dcc77a","resources":{"cweBatchProcess":{"name":"cweBatchProcess","type":"CLOUD_WATCH","config":{"mode":0,"name":"BatchProcess","description":"","scheduleExpression":"rate(2 minutes)"},"globallyEditable":true},"s3batchprocessbucket":{"name":"s3batchprocessbucket","type":"S3","config":{"mode":0,"bucket":{"region":"us-east-1","name":"batchprocess.bucket"}},"globallyEditable":false},"snsusEast1BatchProcessSNS":{"name":"snsusEast1BatchProcessSNS","type":"SNS","config":{"topicMode":0,"topicName":"BatchProcess_SNS","topicArn":"arn:aws:sns:us-east-1:318300609668:BatchProcess_SNS","topicRegion":"us-east-1","snsType":0,"topicDisplayName":"Notify","subscriptions":[{"type":"email","endpoint":"andun@adroitlogic.com"}]},"globallyEditable":true}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":"","editable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk":{"name":"@slappforge/slappforge-sdk","version":"0.0.3","notRemovable":true,"types":"\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"}}},"lambdaId":"50773989-1879-468a-b1b4-998349dcc77a","additionalFiles":[]},"PROJECT_META":{"projectName":"BatchProcess","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"BatchProcess","repoUrl":"https://github.com/TestAndunR/BatchProcess","lastSave":1523362409255}}